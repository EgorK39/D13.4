"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import logging
from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(n)gc)-wk8hx^bf)_$o%me^*q%x#ka67e797od^i+-w(y7kt2*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'News_Portal.apps.NewsPortalConfig',
    'django_filters',
    'accounts',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
    'allauth.socialaccount.providers.vk',
    'django_apscheduler',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',

    'django.middleware.locale.LocaleMiddleware',

]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'Templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Europe/Kaliningrad'

USE_I18N = True

USE_TZ = False

LOCALE_PATH = [
    os.path.join(BASE_DIR, 'locale')
]
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [BASE_DIR / 'static']

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignupForm"}

LOGIN_REDIRECT_URL = '/news'
SITE_URL = 'http://127.0.0.1:8000'  # !

load_dotenv()
E_PASSWORD = os.getenv("E_PASSWORD")

EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'egor159kulikov@yandex.ru'
EMAIL_HOST_PASSWORD = E_PASSWORD
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
    }
}

EMAIL_FILE_PATH = 'email-messages'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        'console_DEBUG': {
            "format": "{asctime} - {levelname} - {message}",
            "style": '{',
        },
        'console_WARNING': {
            "format": "{asctime} - {levelname} - {message} - {pathname}",
            "style": '{',
        },

        'console_ERROR_and_CRITICAL': {
            "format": "{asctime} - {levelname} - {message} - {pathname} - {exc_info}",
            "style": '{',
        },

        'file_INFO': {
            "format": "{asctime} - {levelname} - {module} - {message} - {exc_info}",
            "style": "{",
        },
        "security": {
            "format": "{asctime} - {levelname} - {module} - {message} - {exc_info}",
            "style": "{"
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },

    },
    "handlers": {
        "console_DEBUG_handler": {
            "class": "logging.StreamHandler",
            "formatter": "console_DEBUG",
            "filters": ['require_debug_true'],
        },
        "console_WARNING_handler": {
            "class": "logging.StreamHandler",
            "formatter": "console_WARNING",
            "filters": ['require_debug_true'],
        },

        "console_ERROR_and_CRITICAL_handler": {
            "class": "logging.StreamHandler",
            "formatter": "console_ERROR_and_CRITICAL",
            "filters": ['require_debug_true'],
        },

        "file_ERROR_and_CRITICAL_handler": {
            "class": "logging.FileHandler",
            "formatter": "console_ERROR_and_CRITICAL",
            "filename": 'errors.log',
            "filters": ['require_debug_true'],
        },

        "file_INFO_handler": {
            "class": "logging.FileHandler",
            "formatter": "file_INFO",
            "filename": 'general.log',
            "filters": ['require_debug_false'],
        },
        "file_security_handler": {
            "class": "logging.FileHandler",
            "formatter": "security",
            "filename": 'security.log',
            "filters": ['require_debug_false'],
        },
        'mail_admins': {
            # 'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'email_backend': 'django.core.mail.backends.filebased.EmailBackend',  # FIXME
            "formatter": "console_ERROR_and_CRITICAL",  # FIXME

        },
    },
    "loggers": {

        "file_logger": {
            "handlers": ["file_INFO_handler", "mail_admins"],
            "level": "INFO",
            "propagate": True,

            # logging.INFO("Some info", exc_info=True FIXME

        },

        "console_logger_DEBUG": {
            "handlers": ["console_DEBUG_handler"],
            "level": "DEBUG",
            "propagate": True,
        },
        "console_logger_WARNING": {
            "handlers": ["console_WARNING_handler"],
            "level": "WARNING",
            "propagate": True,
        },
        "console_logger_ERROR_and_CRITICAL": {
            "handlers": ["console_ERROR_and_CRITICAL_handler", "file_ERROR_and_CRITICAL_handler", 'mail_admins'],
            "level": "ERROR",
            "propagate": True,
        },
        "django.request": {
            "level": 'ERROR',
            "handlers": ['file_ERROR_and_CRITICAL_handler'],
        },
        "django.server": {
            "level": 'ERROR',
            "handlers": ['file_ERROR_and_CRITICAL_handler'],
        },
        "django.template": {
            "level": 'ERROR',
            "handlers": ['file_ERROR_and_CRITICAL_handler'],
        },
        "django.db.backends": {
            "level": 'ERROR',
            "handlers": ['file_ERROR_and_CRITICAL_handler'],
        },
        "django.security": {
            "level": 'ERROR',
            "handlers": ['file_ERROR_and_CRITICAL_handler']
        },

    },
}
